[
["index.html", "Flexdashboard Introduction", " Flexdashboard Sunny 2021 Spring Introduction Flexdashboard can be used to publish groups of related data visualizations as a dashboard. A wide variety of components can be included in flexdashboard layouts, including: htmlwidgets, R graphics, Tabular data, Value boxes, Gauges, Text annotations. Flexible options for component layout are available (section 4), and dashboard with several components can be organized into multiple pages (section 3). The flexdashboard layout system also adapts itself intelligently for display on mobile devices (section 7). There are also several ways to add interactivity to flexdashboards. You can use htmlwidgets to add client-side JavaScript interactivity (data tips, panning, zooming, etc.) and Shiny to build fully custom interactions in R. This material is a simplification of Flexdashboard for R, a tutorial which is searchable on rstudio.com. You can click HERE for more detail and information of Flexdashboard for R. "],
["layout.html", "1 Layout", " 1 Layout For more sample layouts click here Here is an example of a basic flexdashboard layout: "],
["orientation.html", "1.1 Orientation", " 1.1 Orientation Layout by Column : By default, level 2 markdown headers (------------------) within dashboards define columns, with individual charts stacked vertically within each column. --- title: &quot;Column Orientation&quot; output: flexdashboard::flex_dashboard --- Column ------------------------------------- ### Chart 1 ```{r} ``` Column ------------------------------------- ### Chart 2 ```{r} ``` ### Chart 3 ```{r} ``` Layout by Row : You can also choose to orient dashboards row-wise rather than column-wise, by specifying the orientation: rows option additionally. --- title: &quot;Row Orientation&quot; output: flexdashboard::flex_dashboard: orientation: rows --- Row ------------------------------------- ### Chart 1 ```{r} ``` Row ------------------------------------- ### Chart 2 ```{r} ``` ### Chart 3 ```{r} ``` All in all, the difference of generating these two orientation is when you desire to show the dashboard row-wise, specifying the orientation: rows option is needed while specification of the orientation: columns option isn’t necessary. "],
["scrolling-layout.html", "1.2 Scrolling Layout", " 1.2 Scrolling Layout For small number of vertically stacked charts, the charts will automatically fill the height of the browser by default. However, if there are too many vertically stacked charts, you can choose to either re-size them all and fill the page by using vertical_layout: fill or layout charts at their natural height and enable scrolling if necessary with vertical_layout: scroll. --- title: &quot;Chart Stack (Scrolling)&quot; output: flexdashboard::flex_dashboard: vertical_layout: scroll --- ### Chart 1 ```{r} ``` ### Chart 2 ```{r} ``` ### Chart 3 ```{r} ``` "],
["tabsets.html", "1.3 Tabsets", " 1.3 Tabsets In many cases tabsets are a better solution than vertical_layout: scroll for displaying large numbers of components since they are so straightforward to navigate. Here is an example code that uses tabset: --- title: &quot;Tabset Column&quot; output: flexdashboard::flex_dashboard --- Column ------------------------------------- ### Chart 1 ```{r} ``` Column {.tabset} ------------------------------------- ### Chart 2 ```{r} ``` ### Chart 3 ```{r} ``` Rows can also be laid out as a tabset. --- title: &quot;Tabset Row&quot; output: flexdashboard::flex_dashboard: orientation: rows --- Row ------------------------------------- ### Chart 1 ```{r} ``` Row {.tabset} ------------------------------------- ### Chart 2 ```{r} ``` ### Chart 3 ```{r} ``` If you have several components you’d like to display within a row or column then rather than attempting to fit them all on screen at the same time you can lay them out as a tabset. This is especially appropriate when one component is primary (i.e. should be seen by all readers) and the others provide secondary information that might be of interest to only some readers. "],
["sizing.html", "2 Sizing", " 2 Sizing To create an ideal layout for your dashboard, it’s important to understand how the size of individual charts is determined. This section describes the layout algorithm and the various ways you can tweak its behavior. "],
["width-and-height.html", "2.1 Width and Height", " 2.1 Width and Height The width of charts in flexdashboard is ultimately determined by the width of the browser. If your layout has a single column then charts will occupy the full width of the browser. If your layout has multiple columns then the columns will split the available width evenly by default. The height of charts is determined in one of two ways depending on whether your dashboard is configured to fit itself into the vertical confines of the page (vertical_layout: fill) or to scroll (vertical_layout: scroll): For dashboards that fill the page the height of charts will be determined by the height of the browser, with vertically stacked charts splitting the available height evenly by default. For scrolling dashboards, the height of charts will be determined by the knitr fig.height option, which defaults to 5 inches (480 pixels). "],
["size-attributes.html", "2.2 Size Attributes", " 2.2 Size Attributes Though the width and height of the charts are automatically determined by the browser by default, you can override the size of the chart via the data-width and data-height attribute. Example below use the data-height attribute to dictate a larger vertical size for the first row. --- title: &quot;Chart Sizing (height)&quot; output: flexdashboard::flex_dashboard: orientation: rows --- Row {data-height=650} ------------------------------------- ### Chart 1 ```{r} ``` Row {data-height=350} ------------------------------------- ### Chart 2 ```{r} ``` ### Chart 3 ```{r} ``` Example below use the data-width attribute to dictate a larger horizontal size for the second column. --- title: &quot;Chart Sizing (width)&quot; output: flexdashboard::flex_dashboard: orientation: rows --- Row {data-height=350} ------------------------------------- ### Chart 1 ```{r} ``` Row {data-height=650} ------------------------------------- ### Chart 2 ```{r} ``` ### Chart 3 ```{r} ``` "],
["flexbox-layout.html", "2.3 Flexbox Layout", " 2.3 Flexbox Layout Dashboard layout is done using the browser flexbox engine, which alters its items’ width and/or height to best fill the available space on any display device. A flexbox layout expands items to fill available free space, or shrinks them to prevent overflow. The implication of this is that chart dimensions established via either knitr figure sizes or data-width and data-height attributes are used to establish relative sizes between charts within the same horizontal or vertical dimension rather than absolute sizes. "],
["multiple-pages.html", "3 Multiple Pages", " 3 Multiple Pages If you have more than a handful of charts you’d like to include in a dashboard, you may want to consider dividing the dashboard into multiple pages. To define a page just use a level 1 markdown header (==================). Each page you define will have its own top-level navigation tab. For example, this code creates a dashboard with two pages, each containing two charts: --- title: &quot;Multiple Pages&quot; output: flexdashboard::flex_dashboard --- Page 1 ===================================== ### Chart 1 ```{r} ``` ### Chart 2 ```{r} ``` Page 2 ===================================== ### Chart 3 ```{r} ``` ### Chart 4 ```{r} ``` "],
["page-orientation.html", "3.1 Page Orientation", " 3.1 Page Orientation Note that in this example both pages use the default “columns” orientation. It is however possible to specify a distinct orientation for an individual page. This is done by adding the data-orientation attribute to the header of the page you want to change the orientation of. For example: --- title: &quot;Page Orientation&quot; output: flexdashboard::flex_dashboard --- Page 1 ===================================== ### Chart 1 ```{r} ``` ### Chart 2 ```{r} ``` Page 2 {data-orientation=rows} ===================================== ### Chart 3 ```{r} ``` ### Chart 4 ```{r} ``` Here is another example for page orientation: --- title: &quot;Page Orientation&quot; output: flexdashboard::flex_dashboard --- Page 1 ===================================== Column ------------------------------------- ### Chart 1 ```{r} ``` Column ------------------------------------- ### Chart 2 ```{r} ``` ### Chart 3 ```{r} ``` Page 2 {data-orientation=rows} ===================================== Row ------------------------------------- ### Chart 4 ```{r} ``` ### Chart 5 ```{r} ``` Row ------------------------------------- ### Chart 6 ```{r} ``` "],
["page-navigation.html", "3.2 Page Navigation", " 3.2 Page Navigation According to the previous section, each page you define is given it’s own top level tab on the navigation bar by default. However, if you have a large number of pages (more than 5) you might want to organize your pages into menus on the navigation bar. For example, the following dashboard has 4 pages, 2 of which are located on “Menu A” and two of which are located on “Menu B”: --- title: &quot;Page Navigation Menus&quot; output: flexdashboard::flex_dashboard --- Page 1 {data-navmenu=&quot;Menu A&quot;} ===================================== ### Chart 1 ```{r} ``` Page 2 {data-navmenu=&quot;Menu A&quot;} ===================================== ### Chart 2 ```{r} ``` Page 3 {data-navmenu=&quot;Menu B&quot;} ===================================== ### Chart 3 ```{r} ``` Page 4 {data-navmenu=&quot;Menu B&quot;} ===================================== ### Chart 4 ```{r} ``` "],
["page-links.html", "3.3 Page Links", " 3.3 Page Links You can form links directly to dashboard pages using markdown link syntax: [Page 2]. To use custom link text you can also create a link via the page’s anchor: [I want to view page 2](#page-2). Both styles of page linking are demonstrated in this example: --- title: &quot;Page Links&quot; output: flexdashboard::flex_dashboard --- Page 1 ===================================== [Page 2] [I want to view page 2](#page-2) ### Chart A ```{r} ``` Page 2 ===================================== ### Chart B ```{r} ``` "],
["page-icons.html", "3.4 Page Icons", " 3.4 Page Icons You can add an icon to the navigation menu for a page using the data-icon attribute. For example, the following specifies a navigation bar icon for each of two pages: --- title: &quot;Page Icons&quot; output: flexdashboard::flex_dashboard --- Page Github {data-icon=&quot;fa-github&quot;} ===================================== ### Chart A ```{r} ``` Page Twitter {data-icon=&quot;ion-social-twitter&quot;} ===================================== ### Chart B ```{r} ``` You can specify icons for navigation bar items from three different icon set: Font Awesome Ionicons Bootstrap Glyphicons When referring to an icon you should use it’s full name including the icon set prefix. Different icon set has its own set prefix, sometimes the prefix is quite confusing, make sure you search for the latest version of the icon.(e.g. “fa-github”, “ion-social-twitter”, “glyphicon-time”, etc.). You may run into problems when using these icons from different website. For example, one should use the v2 ionicon names from ionicons.com, since R Markdown is operating with an outdated version of ionicons(v2), which uses a different naming convention. Also, make sure you are searching on the latest version of Font Awesome, outdated prefix or name of the icon may not work properly on your flexdashboard. "],
["components.html", "4 Components", " 4 Components A wide variety of components can be included in flexdashboard layouts, including: htmlwidgets R graphics Tabular data Value boxes Gauges Text annotations Here is an example of some htmlwidgets (Plotly) included in flexdashboard layouts: Here is an example of some htmlwidgets (Leaflet) included in flexdashboard layouts: "],
["html-widgets.html", "4.1 HTML Widgets", " 4.1 HTML Widgets The htmlwidgets framework provides high-level R bindings for JavaScript data visualization libraries. Charts based on htmlwidgets are ideal for use with flexdashboard because they can dynamically re-size themselves, so will nearly always fit perfectly within the bounds of their flexdashboard containers. Leaflet, a library for creating dynamic maps that support panning and zooming, with various annotations like markers, polygons, and popups. # Here is a basic example of leaflet: library(leaflet) m &lt;- leaflet() %&gt;% addTiles() %&gt;% addMarkers(lng=120.217729, lat=22.998343, popup=&quot;Department of Statistics, NCKU&quot;) m dygraphs, which provides rich facilities for charting time-series data and includes support for many interactive features including series/point highlighting, zooming, and panning. # Here is a basic example of dygraphs: library(dygraphs) dygraph(nhtemp, main = &quot;New Haven Temperatures&quot;) %&gt;% dyRangeSelector(dateWindow = c(&quot;1920-01-01&quot;, &quot;1960-01-01&quot;)) Plotly, which via it’s ggplotly interface allows you to easily translate your ggplot2 graphics to an interactive web-based version. # Here is a basic example of plotly: library(ggplot2) library(plotly) p &lt;- ggplot(data=mtcars, aes(y=mpg, x=wt)) + geom_point(aes(color=factor(gear))) + labs(y=&quot;Miles/(US)gallon&quot;, x=&quot;Weight(1000 lbs)&quot;, color=&quot;Number of forward gears&quot;) ggplotly(p) rbokeh, a visualization library that provides a flexible and powerful declarative framework for creating web-based plots. # Here is a basic example of rbokeh: library(rbokeh) figure() %&gt;% ly_points(Sepal.Length, Sepal.Width, data = iris, color = Species, glyph = Species, hover = list(Sepal.Length, Sepal.Width)) Highcharter, a rich R interface to the popular Highcharts JavaScript graphics library. # Here is a basic example of highcharter: library(highcharter) hchart(mtcars, &quot;scatter&quot;, hcaes(wt, mpg, z = drat, color = hp)) %&gt;% hc_title(text = &quot;Scatter chart with size and color&quot;) visNetwork, an interface to the network visualization capabilities of the vis.js library. # Here is a basic example of visNetwork: library(visNetwork) nodes &lt;- data.frame(id = 1:6, title = paste(&quot;node&quot;, 1:6), shape = c(&quot;dot&quot;, &quot;square&quot;), size = 10:15, color = c(&quot;blue&quot;, &quot;red&quot;)) edges &lt;- data.frame(from = 1:5, to = c(5, 4, 6, 3, 3)) visNetwork(nodes, edges) %&gt;% visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) Above are just some of the htmlwidgets, there are over 30 packages on CRAN which provide htmlwidgets. You can find example uses of several of the more popular htmlwidgets in the htmlwidgets showcase and browse all available widgets in the gallery. "],
["r-graphics.html", "4.2 R Graphics", " 4.2 R Graphics You can use any chart created with standard R graphics (base, lattice, grid, etc.) with flexdashboard. Dynamic (shiny) dashboards are automatically sized to fit within there dashboard containers so long as they are wrapped within a call to renderPlot. However when creating static (non-Shiny) dashboards containing standard R graphics, it’s critical to define knitr fig.width and fig.height values which enables them to fit into their layout container appropriately. Here’s an example of a row based layout that includes 3 charts from R base graphics: --- title: &quot;Figure Sizes&quot; output: flexdashboard::flex_dashboard: orientation: rows --- Row ------------------------------------- ### Chart 1 ```{r, fig.width=10, fig.height=7} plot(cars) ``` Row ------------------------------------- ### Chart 2 ```{r, fig.width=5, fig.height=5} plot(pressure) ``` ### Chart 3 ```{r, fig.width=5, fig.height=5} plot(airmiles) ``` Note that the ideal values for the size of these figures typically need to be determined by experimentation. "],
["tabular-data.html", "4.3 Tabular Data", " 4.3 Tabular Data You can include tabular data within flexdashboards in one of two ways: As a simple tabular display. As a DataTable that includes sorting, filtering, and pagination. 4.3.1 Simple Table A simple table is ideal for smaller numbers of records (i.e. 40-50 or less). For static dashboards, you should use the knitr::kable function to output your dataset, for example: --- title: &quot;Static Simple Table&quot; output: flexdashboard::flex_dashboard --- ### Cars ```{r} knitr::kable(mtcars) ``` For Shiny based dashboards you should use the shiny::renderTable function, for example: ### Cars ```{r} renderTable({ head(mtcars, n=input$rows) }) ``` 4.3.2 Data Table The DT package can display R matrices or data frames as interactive HTML tables that support filtering, pagination, and sorting. To include a DataTable you use the DT::datatable function: --- title: &quot;DataTable&quot; output: flexdashboard::flex_dashboard --- ### Cars ```{r} DT::datatable(mtcars, options = list( bPaginate=TRUE, pageLength= 15 )) ``` To include a DataTable within a Shiny flexdashboard you need to be sure to wrap the datatable output in DT::renderDataTable (so that it is updated when inputs it depends on change). For example: ### Cars ```{r} DT::renderDataTable({ data &lt;- head(mtcars, n = input$maxrows) DT::datatable(data, options = list( bPaginate = FALSE )) }) ``` On desktop and tablet displays, both the Simple Table and Data Table components will fit exactly within the bounds of their flexdashboard container and provide a scroll bar to view records that don’t fit on screen. On mobile phones, however, the Simple Table will display all available records and the Data Table will be force to use pagination. "],
["value-boxes.html", "4.4 Value Boxes", " 4.4 Value Boxes Sometimes you want to include one or more simple values within a dashboard. You can use the valueBox function to display single values along with a title and optional icon. For example, here is a code for three side-by-side sections: --- title: &quot;Value Boxes&quot; output: flexdashboard::flex_dashboard: orientation: rows --- ```{r, echo=FALSE} library(flexdashboard) ``` Row ----------------------------------------------------------------------- ### Articles per Day ```{r} articles &lt;- 45 valueBox(articles, icon = &quot;fa-pencil&quot;, href=&quot;#details&quot;) ``` ### Comments per Day ```{r} comments &lt;- 126 valueBox(comments, icon = &quot;fa-comments&quot;, href=&quot;#details&quot;) ``` ### Spam per Day ```{r} spam &lt;- 5 valueBox(spam, icon = &quot;fa-trash&quot;, color = ifelse(spam &gt; 3, &quot;warning&quot;, &quot;primary&quot;), href=&quot;#details&quot;) ``` There are a few things to note about this example: The third code chunk (“Spam per Day”) makes the background color of the value box dynamic using the color parameter. Available colors include “primary”, “info”, “success”, “warning”, and “danger” (the default is “primary”). If a valueBox displays a value for which additional detail is available on another dashboard page you can enable navigation to the other page via the href parameter. To include a value box within a Shiny flexdashboard you need to be sure to wrap the value box output in renderValueBox (so that it is updated when inputs it depends on change). For example: ### Articles per Day ```{r} renderValueBox({ articles &lt;- computeArticles(input$types) valueBox(articles, icon = &quot;fa-pencil&quot;, color = ifelse(articles &gt; 100, &quot;success&quot;, &quot;info&quot;)) }) ``` "],
["gauges.html", "4.5 Gauges", " 4.5 Gauges Gauges display values on a meter within a specified range. For example, here is a code of 3 gauges: --- title: &quot;Gauges&quot; output: flexdashboard::flex_dashboard: orientation: rows --- ```{r, echo=FALSE} library(flexdashboard) ``` Row ----------------------------------------------------------------------- ### Contact Rate ```{r} rate &lt;- 91 gauge(rate, min=0, max=100, symbol=&#39;%&#39;, gaugeSectors( success=c(80,100), warning=c(40,79),danger=c(0,39) ), href=&quot;#details&quot;) ``` ### Average Rating ```{r} rating &lt;- 37.4 gauge(rating, min=0, max=100, gaugeSectors( success=c(41,50), warning=c(21,40),danger=c(0,20) ), href=&quot;#details&quot;) ``` ### Cancellations ```{r} cancellations &lt;- 7 gauge(cancellations, min=0, max=10, gaugeSectors( success=c(0,2), warning=c(3,6), danger=c(7,10) ), href=&quot;#details&quot;) ``` There are a few things to note about this example: The gauge function is used to output a gauge. It has three required arguments: value, min, and max (these can be any numeric values). You can specify an optional symbol to be displayed alongside the value (in the example “%” is used to denote a percentage). You can specify a set of custom color sectors using the gaugeSectors function. By default the current theme’s “success” color (typically green) is used for the gauge color. The sectors option enables you to specify a set of three value ranges (“success”, “warning”, and “danger”) which cause the gauge’s color to change based on it’s value. If a gauge displays a value for which additional detail is available on another dashboard page you can enable navigation to the other page via the href parameter. To include a gauge within a Shiny flexdashboard you need to be sure to wrap the gauge output in renderGauge (so that it is updated when inputs it depends on change). For example: ### Contact Rate ```{r} renderGauge({ rate &lt;- computeContactRate(input$region) gauge(rate, min = 0, max = 100, symbol = &#39;%&#39;, gaugeSectors( success = c(80, 100), warning = c(40, 79), danger = c(0, 39) )) }) ``` "],
["nevigation-bar.html", "4.6 Nevigation Bar", " 4.6 Nevigation Bar By default, the flexdashboard navigation bar includes the document’s title, author, and date. When a dashboard has Multiple Pages, links to the various pages are also included on the left side of the navigation bar. You can also add social links and a link to view the source code of the dashboard. Here is an example code: --- title: &quot;Navigation Bar&quot; output: flexdashboard::flex_dashboard: social: [&quot;twitter&quot;, &quot;facebook&quot;, &quot;pinterest&quot;, &quot;menu&quot;] source_code: embed navbar: - { title: &quot;Github&quot;, href: &quot;https://github.com&quot;, icon: &quot;fa-github&quot;, align: left } - { title: &quot;NCKU Statistics&quot;, href: &quot;http://www.stat.ncku.edu.tw&quot;, icon: &quot;far fa-chart-bar&quot;, align: left} --- There are a few things to note about this example: You can custom links to the navigation bar using the navbar option. Navigation bar items must include either a title or icon field (or both). You should also include a href as the navigation target. The align field is optional (it can be “left” or “right” and defaults to “right”). You can include links to social sharing services via the social option. The social option can include any number of the following services: “facebook”, “twitter”, “google-plus”, “linkedin”, and “pinterest”. You can also specify “menu” to provide a generic sharing drop-down menu that includes all of the services. You can include a link to the dashboard’s source code using the source_code option. Source code can either be embedded into the document (source_code: embed) or can be a link to a URL where the source code can be found online (e.g. source_code: &quot;https://github.com/user/repo&quot;). "],
["text-annotations.html", "4.7 Text Annotations", " 4.7 Text Annotations If you need to include additional narrative or explanation within your dashboard, here is an example code of dashboard includes some content at the top and a dashboard section that contains only text: --- title: &quot;Text Annotations&quot; output: flexdashboard::flex_dashboard: orientation: rows --- Monthly deaths from bronchitis, emphysema and asthma in the UK, 1974–1979 (Source: P. J. Diggle, 1990, Time Series: A Biostatistical Introduction. Oxford, table A.3) ```{r setup, echo=FALSE} library(dygraphs) ``` Row {data-height=600} ------------------------------------- ### All Lung Deaths ```{r} dygraph(ldeaths) ``` &gt; Monthly deaths from lung disease in the UK, 1974-1979 Row {data-height=400} ------------------------------------- ### Male Deaths {.no-title} ```{r} dygraph(mdeaths) ``` ### About dygraphs This example makes use of the dygraphs R package. The dygraphs package provides rich facilities for charting time-series data in R. You can use dygraphs at the R console, within R Markdown documents, and within Shiny applications. There are a few things to note about this example: You can include content at the top of the page before dashboard sections are introduced. You can define dashboard sections that don’t include a chart but rather include arbitrary content (text, images, equations, etc.) Each component within a dashboard includes optional title and notes sections. The title is simply the text after the level 3 (###) section heading. The notes are any text prefaced with &gt; after the code chunk which yields the component’s output. You can exclude the title entirely by applying the .no-title attribute to a section heading. "],
["appearance.html", "5 Appearance", " 5 Appearance There are various ways to customize your own dashboard. This section intorduce three ways to enable changing the appearance of the dashboard. CSS Styles in section 5.2 is a powerful and efficient tool for controlling and setting the apperance of websites, including flexdashboard. Customizing your dashboard with CSS is an easy way to moke your dashboard outstanding. "],
["themes.html", "5.1 Themes", " 5.1 Themes A variety of themes are available to modify the base appearance of flexdashboard. Available themes include: default, cosmo, bootstrap, cerulean, journal, flatly, readable, spacelab, united, lumen, paper, sandstone, simplex, yeti. The “cosmo” theme is used when “default” is specified. These themes are all based on the themes available in the R Markdown package. Here is an example code of using the theme option: --- title: &quot;Themes&quot; output: flexdashboard::flex_dashboard: theme: bootstrap orientation: rows --- ### Chart 1 ```{r} ``` ### Chart 2 ```{r} ``` Try to choose the most suitable theme for your flexdashboard! "],
["css-styles.html", "5.2 CSS Styles", " 5.2 CSS Styles You can customize the various CSS styles used in flexdashboard (e.g. changing navigation bar colors) by including a stylesheet via the css option. For example: --- title: &quot;Custom CSS&quot; output: flexdashboard::flex_dashboard: css: styles.css --- Besides web designing, CSS is also a powerful tool for customizing R Markdown. If you want to learn more about CSS, there are plenty of information on the internet. You will find it very useful and necessary while doing customizing task. Here is an integrated CSS tutorial for you. "],
["logo-favicon.html", "5.3 Logo &amp; Favicon", " 5.3 Logo &amp; Favicon You can specify a logo image and/or favicon for your dashboard using the logo and favicon options, respectively. For example: --- title: &quot;Logo and Favicon&quot; output: flexdashboard::flex_dashboard: logo: logo.png favicon: favicon.png --- The logo will be placed at the far left of the dashboard navigation bar. No scaling is performed on the logo image, so it should fit exactly within the dimensions of the navigation bar (48 pixels high for the default “cosmo” theme, other themes may have slightly different navigation bar heights). "],
["storyboards.html", "6 Storyboards", " 6 Storyboards Storyboards are an alternative to the row and column based layout schemes described above that are well suited to presenting a sequence of data visualizations and related commentary. Here is an example of a storyboard with various htmlwidgets components included: "],
["storyboard-basics.html", "6.1 Storyboard Basics", " 6.1 Storyboard Basics To create a storyboard layout you do the following: Add the storyboard: true option to the dashboard. Include a set of level 3 (###) dashboard components. Each component will be allocated it’s own frame in the storyboard, with the section title used as the navigation caption. The following code creates a storyboard with 3 frames: --- title: &quot;Storyboard&quot; output: flexdashboard::flex_dashboard: storyboard: true --- ### Frame 1 ```{r} ``` ### Frame 2 ```{r} ``` ### You can provide a one or two sentence summary of the frame here. Long and multiple sentences are available. ```{r} ``` "],
["storyboard-pages.html", "6.2 Storyboard Pages", " 6.2 Storyboard Pages You can layout one or more pages of a dashboard as storyboards and then use traditional row and column layout on the other pages. To do this, you exclude the storyboard: true option and instead add the {.storyboard} class to pages you want laid out as storyboards. For example, the following dashboard includes a storyboard on the first page (“Analysis”) as well as another page (“Details”) that uses conventional layout: --- title: &quot;Storyboard Pages&quot; output: flexdashboard::flex_dashboard --- Analysis {.storyboard} ===================================== ### Frame 1 ```{r} ``` ### Frame 2 ```{r} ``` Details ===================================== Column ------------------------------------- ### Chart A ```{r} ``` ### Chart B ```{r} ``` Column ------------------------------------- ### Chart C ```{r} ``` "],
["commentary.html", "6.3 Commentary", " 6.3 Commentary You may wish to add commentary alongside the frames in your storyboard. To do this you add a horizontal rule separator (***) after the main body of frame content. Content after the separator will appear in a commentary sidebar to the right. Here is an example code using the separator: --- title: &quot;Storyboard Commentary&quot; output: flexdashboard::flex_dashboard: storyboard: true --- ### Frame1 ```{r} ``` *** Some commentary about Frame 1. ### Frame2 {data-commentary-width=300} ```{r} ``` *** Some commentary about Frame 2. Note that the second frame includes a data-commentary-width=400 attribute. By default the width of the commentary sidebar is 300 pixels. "],
["mobile-layout.html", "7 Mobile Layout", " 7 Mobile Layout The flexdashboard layout system adapts itself intelligently for display on mobile devices. This section describes layout behavior for various screen sizes as well as some guidelines for ensuring that your dashboards work well on smaller screens. "],
["medium-screens.html", "7.1 Medium Screens", " 7.1 Medium Screens The layout of dashboard components for medium sized mobile screens (e.g. tablets) is the same as for larger desktop screens (any screen with width greater than 768 pixels is considered a medium screen). Rows and columns are allocated using the default figure sizes and respect the relative proportions established via the use of data-width attributes. The only exception are sidebars, which are reduced to 220 pixels wide whenever the screen is less than 993 pixels wide. "],
["small-screens.html", "7.2 Small Screens", " 7.2 Small Screens For mobile phones (any screen less than or equal to 768 pixels wide) flexdashboard uses special layout behavior. Since these screens don’t generally have the width to show multiple side-by-side columns, all dashboard components are “flattened” into one single column layout. In addition, some flexdashboard components have special behavior to adapt themselves to smaller mobile screens: By default R graphics are rendered twice, once at their natural fig.width and fig.height, and once at a mobile-optimized size (3.75 x 4.8 inches). When displaying on a mobile phone in portrait orientation the mobile size is used (this can be controlled via the fig_mobile option). Simple tables always show all of their rows (this is so that scrolling the table doesn’t interfere with scrolling the mobile display). DataTables always use pagination (again, so that scrolling the DataTable doesn’t interfere with scrolling the overall display). "],
["mobile-css.html", "7.3 Mobile CSS", " 7.3 Mobile CSS If certain components of your dashboard don’t work well on smaller mobile devices you can exclude them by applying the {.no-mobile} class attribute to a dashboard section. For example, this dashboard hides it’s second component on mobile devices: --- title: &quot;Exclude on Mobile&quot; output: flexdashboard::flex_dashboard --- ### Chart 1 ```{r} plot(cars) ``` ### Chart 2 {.no-mobile} ```{r} plot(cars) ``` It’s also possible to create a mobile-specific version of a given dashboard component that will be used in place of the default version. You can do this by creating two identically titled sections and applying the {.mobile} class attribute to one of them. Here is an example code using {.mobile}: --- title: &quot;Mobile Specific Component&quot; output: flexdashboard::flex_dashboard --- ### Chart 1 ```{r} plot(cars) ``` ### Chart 2 {.mobile} ```{r} plot(cars) ``` "],
["learning-more.html", "8 Learning More", " 8 Learning More The Shiny page describes how to create interactive dashboards, or that update themselves incrementally as their underlying data changes. The Layouts page includes a variety of sample layouts which you can use as a starting point for your own dashboards. The Examples page includes several examples of flexdashboard in action (including links to source code if you want to dig into how each example was created). "]
]
